trigger: none
pr: none

schedules:
- cron: "30 05 * * *"
  branches:
    include:
    - dev
  always: true

pool:
    vmImage: 'Ubuntu-latest'

stages:
- stage: prepare
  condition: eq(variables['PublishPrivateVersion'], '')
  jobs:
  - job: fetchlatest
    displayName: Check CoreTools Version
    steps:
      - bash: |
          sudo npm i -g azure-functions-core-tools@4 --unsafe-perm true
          func --version > $(Build.ArtifactStagingDirectory)/core-tools-version.txt
          date '+%w' > $(Build.ArtifactStagingDirectory)/week.txt
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
- stage: build
  condition: eq(variables['PublishPrivateVersion'], '')
  jobs:

  - job: java
    displayName: Java
    steps: 
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          itemPattern: 
          downloadPath: '$(System.ArtifactsDirectory)'
      - bash: |
          targetVersion=`cat $(System.ArtifactsDirectory)/drop/core-tools-version.txt`
          privateVersion=${targetVersion}.`cat $(System.ArtifactsDirectory)/drop/week.txt`
          echo "targetVersion: ${targetVersion}"
          echo "##vso[task.setvariable variable=TargetVersion;]${targetVersion}"
          echo "privateVersion: ${privateVersion}"
          echo "##vso[task.setvariable variable=PrivateVersion;]${privateVersion}"
        displayName: share the targetVersion and PrivateVersion
      - bash: |
          # login
          set -e
          echo $pswd | docker login -u $(dockerUsername) --password-stdin azurefunctions.azurecr.io

        displayName: login to registry
        continueOnError: false
        env:
          pswd: $(dockerPassword)
      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(PrivateVersion)-java8-core-tools
          docker build -t $IMAGE_NAME \
                      -f host/4/bullseye/amd64/java/java8/java8-core-tools.Dockerfile \
                      host/4/bullseye/amd64/java/java8
          npm run test $IMAGE_NAME --prefix  test/
          docker push $IMAGE_NAME
        displayName: java8-core-tools
        continueOnError: false
        env:
          DOCKER_BUILDKIT: 1
      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(PrivateVersion)-java11-core-tools
          docker build -t $IMAGE_NAME \
                      -f host/4/bullseye/amd64/java/java11/java11-core-tools.Dockerfile \
                      host/4/bullseye/amd64/java/java11
          npm run test $IMAGE_NAME --prefix  test/
          docker push $IMAGE_NAME
        displayName: java11-core-tools
        continueOnError: false
        env:
          DOCKER_BUILDKIT: 1

- stage: publish
  condition: and(not(failed('build')), ne(variables['BuildOnly'], 'true'))
  jobs:
  - job: testandpublish
    displayName: Test and Publish Images
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          itemPattern: 
          downloadPath: '$(System.ArtifactsDirectory)'
        condition: eq(variables['PublishPrivateVersion'], '')
      - bash: |
          targetVersion=""
          privateVersion=""
          if [[ ! -z "${publishPrivateVersion}" ]]; then
            targetVersion="${publishTargetVersion}"
            privateVersion="${publishPrivateVersion}"
          else
            targetVersion=`cat $(System.ArtifactsDirectory)/drop/core-tools-version.txt`
            privateVersion=${targetVersion}.`cat $(System.ArtifactsDirectory)/drop/week.txt`
          fi
          echo "targetVersion: ${targetVersion}"
          echo "##vso[task.setvariable variable=TargetVersion;]${targetVersion}"
          echo "privateVersion: ${privateVersion}"
          echo "##vso[task.setvariable variable=PrivateVersion;]${privateVersion}"
        displayName: share the targetVersion and PrivateVersion
        env:
          publishPrivateVersion: $(PublishPrivateVersion)
          publishTargetVersion: $(PublishTargetVersion)
      - bash: |
          echo $pswd | docker login -u $(dockerUsername) --password-stdin azurefunctions.azurecr.io
        displayName: login
        continueOnError: false
        env:
          pswd: $(dockerPassword)
    
      - bash: |
          set -e
          SOURCE_REGISTRY=azurefunctions.azurecr.io/azure-functions/4
          TARGET_REGISTRY=azurefunctions.azurecr.io/public/azure-functions

          MAJOR_VERSION=4
    
          if [ -z "$(TargetVersion)" ]; then
            echo "ERROR: TargetVersion is required"
            exit 1
          fi
    
          echo "##vso[task.setvariable variable=MajorVersion]$MAJOR_VERSION"    
          echo "##vso[task.setvariable variable=SOURCE_REGISTRY]$SOURCE_REGISTRY"
          echo "##vso[task.setvariable variable=TARGET_REGISTRY]$TARGET_REGISTRY"
        displayName: set env
        continueOnError: false

      - bash: |
          set -e
          docker pull $SOURCE_REGISTRY/java:$(PrivateVersion)-java8-core-tools
    
          docker tag $SOURCE_REGISTRY/java:$(PrivateVersion)-java8-core-tools $TARGET_REGISTRY/java:$(TargetVersion)-java8-core-tools
  
          docker tag $SOURCE_REGISTRY/java:$(PrivateVersion)-java8-core-tools $TARGET_REGISTRY/java:$(MajorVersion)-java8-core-tools  
    
        displayName: tag java8 images
        continueOnError: false
      - bash: |
          set -e 
          PrivateImageId=`docker image inspect $SOURCE_REGISTRY/java:$(PrivateVersion)-java8-core-tools --format='{{.Id}}'`
          MajorImageId=`docker image inspect $TARGET_REGISTRY/java:$(MajorVersion)-java8-core-tools --format='{{.Id}}'`
          if [[ "$PrivateImageId" != "$MajorImageId" ]]; then
            echo "unmatch the Target image id and Major image id ${PrivateImageId} and ${MajorImageId}";
            exit 1; 
          fi

          ActualVersion=`docker run $TARGET_REGISTRY/java:$(MajorVersion)-java8-core-tools func --version`
          if [[ "$ActualVersion" != "$(TargetVersion)" ]]; then
            echo "unmatch the ActualVersion and TargetVersion ${ActualVersion} and $(TargetVersion)";
            exit 1;
          fi
          docker run $TARGET_REGISTRY/java:$(MajorVersion)-java8-core-tools az --version
        displayName: test java8 images
        continueOnError: false
      - bash: |
          set -e
          docker push $TARGET_REGISTRY/java:$(TargetVersion)-java8-core-tools

          docker push $TARGET_REGISTRY/java:$(MajorVersion)-java8-core-tools
    
          docker system prune -a -f
        displayName: push java8 images
        continueOnError: false
        condition: ne(variables['SkipProduction'], 'true')

      - bash: |
          set -e
          docker pull $SOURCE_REGISTRY/java:$(PrivateVersion)-java11-core-tools
    
          docker tag $SOURCE_REGISTRY/java:$(PrivateVersion)-java11-core-tools $TARGET_REGISTRY/java:$(TargetVersion)-java11-core-tools
  
          docker tag $SOURCE_REGISTRY/java:$(PrivateVersion)-java11-core-tools $TARGET_REGISTRY/java:$(MajorVersion)-java11-core-tools  
    
        displayName: tag java images
        continueOnError: false
      - bash: |
          set -e 
          PrivateImageId=`docker image inspect $SOURCE_REGISTRY/java:$(PrivateVersion)-java11-core-tools --format='{{.Id}}'`
          MajorImageId=`docker image inspect $TARGET_REGISTRY/java:$(MajorVersion)-java11-core-tools --format='{{.Id}}'`
          if [[ "$PrivateImageId" != "$MajorImageId" ]]; then
            echo "unmatch the Target image id and Major image id ${PrivateImageId} and ${MajorImageId}";
            exit 1; 
          fi

          ActualVersion=`docker run $TARGET_REGISTRY/java:$(MajorVersion)-java11-core-tools func --version`
          if [[ "$ActualVersion" != "$(TargetVersion)" ]]; then
            echo "unmatch the ActualVersion and TargetVersion ${ActualVersion} and $(TargetVersion)";
            exit 1;
          fi
          docker run $TARGET_REGISTRY/java:$(MajorVersion)-java11-core-tools az --version
        displayName: test java images
        continueOnError: false
      - bash: |
          set -e
          docker push $TARGET_REGISTRY/java:$(TargetVersion)-java11-core-tools

          docker push $TARGET_REGISTRY/java:$(MajorVersion)-java11-core-tools
    
          docker system prune -a -f
        displayName: push java images
        continueOnError: false
        condition: ne(variables['SkipProduction'], 'true')